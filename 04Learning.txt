# How to Learn

_Excellence is a habit. - Aristotle_

## Can You Learn on Your Own?

One of the biggest questions on your mind when you started reading this guide was: "Can I learn all of this on my own?" A better set of questions, which some might have asked might be: "What resources do I have at my disposal for learning how to code? Do substitutes exist for a formal full-time immersive programming course?"  

As we touch upon in FAQ section, the short answer is YES. So refer to the FAQ and appendix of Prep Resources to find links to learning resources that will help you learn and grow. That said, it is worth while 

What does a successful student look like?  From my interaction with many graduates of programming course around San Francisco, I have observed the following from high caliber performers.  

After all, no one can do the learning for you. In the end, a good attitude to take into any journey of learning is 

## The Factory of Good Habits

There are two great books about habits: __The Power of Habit__ by Charles Duhigg, and __The 7 Habits of Highly Effective People__ by Stephen Covey. And it struck us: the difference between a senior and junior software engineers is not only in the size of their paycheck; more importantly it is in their habits!

![Students](images/HackReactorStudents.jpg "Students Forming Habits")

Letâ€™s be honest here. Majority of the day-to-day coding problems are solved by an extensive google search. On the other hand, good habits make any engineer more efficient by:

1. Coach students to prevent making common mistakes (or mistake prone code) in the first place. These might include teaching patterns, test-driven development (TDD), and language convention habits.

2. Helping students come up with solutions faster, e.g., debugging and thinking habits.

In our opinion, good Programming Course provides an excellent structure for helping individual students form good habits with expert guidance. There is a third element associated with the programming course learning environment: your peers.

3.  In many ways, the greatest benefit of attending a programming course will be your interaction with the other students. In a good program, you will engage each other and enlighten each other. Seemingly impossible challenges will seem bearable, even enjoyable.  This is the power, after all, of all organizations.  It is the power of leveraging each other - a sharp sword sharpening another sharp sword.

We recognize that some software engineers are solving cutting-edge (not on StackOverflow) problems. For them, it is even more important to rely on good habits to get the trivial things out of the way.

## What Would a Senior Software Engineer Say?

One time, I (David) joined a running meetup and ran with a veteran computer scientist. We discussed the advant of software platforms that enable startups on demand ecosystem. We also talked about the recent trend of coding as a literacy, and of various startups and tools now available to help people learn to code quickly - either independently, or by joining a programming course. During a subsequent email exchange, he shared some interesting insights. 

>I would also say that just as there's more to being a good business type than having a lot of linkedin connections, there's more to being a good programmer than knowing a few languages and tools. We do study a lot of theory (well, some of us do) at college, and more importantly a really good programmer becomes a master craftsman like anyone else, able to really judge and build good software in the ways that really matter. This is more than what a non-programmer (or bad programmer) sees from the outside, again like any profession. I could say more in person, but again the key to understanding and appreciating what being good at the other guy's job really means, is finding some who actually is good at that job, and then respecting them enough to listen to what they say about what it really is. I'm sure the works the other direction (me learning about non-programmers), as well.
>
>I'd also say that the Paul Graham article starts with the question "what kind of person is likely to make creative destruction work?" My (somewhat techie) point of view might start more with "what are my talents and interests; what is my spirituality (seriously); how can I best help the world; is this a field where high risk / high growth, i.e. creative destruction, is appropriate; if so what skills do I need in a team and how do I acquire them; etc.". I think it's less about feeling inadequate because you don't know how to code, and more about figuring out what you were really born to do.
>

I think this last point is quite important. It is a surprising common theme. I will say that in the best programming courses, the people who are there are there because they are seriously pursuing and discovering their passions, rather than out of some sense of inadequacy about their abilities.